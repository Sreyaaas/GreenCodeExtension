#!/bin/bash
# Pre-commit hook to analyze modified Python files for sustainability using Groq API

LOG_FILE="sustainability_hook_log.txt"

# Initialize log file
echo "=====================================================" > $LOG_FILE
echo "Pre-commit hook execution - $(date)" >> $LOG_FILE
echo "=====================================================" >> $LOG_FILE

# Log function for better debugging
log() {
  echo "[$(date +%H:%M:%S)] $1" | tee -a $LOG_FILE
}

error_log() {
  echo "[$(date +%H:%M:%S)] ERROR: $1" | tee -a $LOG_FILE
}

log "Starting pre-commit sustainability hook for Python files"

# Check if git is available
if ! command -v git &> /dev/null; then
    error_log "git command not found"
    exit 1
fi

# Check if Python is available
if command -v python3 &> /dev/null; then
    PYTHON_CMD="python3"
elif command -v python &> /dev/null; then
    PYTHON_CMD="python"
else
    error_log "Python command not found"
    exit 1
fi

log "Using Python command: $PYTHON_CMD"

# Check if main.py exists
if [ ! -f "main.py" ]; then
    error_log "main.py not found in current directory"
    log "Current directory contents:"
    ls -la | tee -a $LOG_FILE
    exit 1
fi

# Check if GROQ_API_KEY environment variable is set
if [ -z "$GROQ_API_KEY" ]; then
    error_log "GROQ_API_KEY environment variable not set"
    exit 1
fi

# Get list of staged Python files
STAGED_FILES=$(git diff --name-only --cached -- "*.py" | grep -v "main.py")
log "Found staged Python files: $STAGED_FILES"

# Save working directory for reference
WORK_DIR=$(pwd)
log "Working directory: $WORK_DIR"

if [ -n "$STAGED_FILES" ]; then
    TEMP_DIR=$(mktemp -d)
    log "Created temporary directory: $TEMP_DIR"
    
    while IFS= read -r file; do
        log "==============================================" 
        log "Analyzing file: $file"
        
        # Get the staged version of the file
        TEMP_FILE="$TEMP_DIR/$(basename "$file")"
        git show :"$file" > "$TEMP_FILE"
        
        # Check if the file is not empty
        if [ ! -s "$TEMP_FILE" ]; then
            log "File is empty or doesn't exist in the staging area: $file"
            continue
        fi
        
        # Get file size
        FILE_SIZE=$(wc -c < "$TEMP_FILE" 2>/dev/null || echo "unknown")
        log "File size: $FILE_SIZE bytes"
        
        # Define output file path
        OUTPUT_FILE="$TEMP_DIR/$(basename "$file")_sustainable"
        
        # Run the sustainability analysis
        log "Running sustainability analysis on: $file"
        $PYTHON_CMD main.py "$TEMP_FILE" --output "$OUTPUT_FILE"
        
        STATUS=$?
        if [ $STATUS -ne 0 ]; then
            error_log "Sustainability analysis failed for: $file (status code: $STATUS)"
            continue
        fi
        
        # Check if the output file exists
        if [ ! -f "$OUTPUT_FILE" ]; then
            error_log "Output file not found: $OUTPUT_FILE"
            continue
        fi
        
        # Replace the original file with the sustainable version
        log "Replacing original file with sustainable version"
        cp "$OUTPUT_FILE" "$file"
        
        # Re-stage the file
        git add "$file"
        log "Re-staged modified file: $file"
        
        log "Completed analysis for: $file"
    done <<< "$STAGED_FILES"
    
    # Clean up temporary directory
    rm -rf "$TEMP_DIR"
    log "Cleaned up temporary directory"
    
    log "=============================================="
    log "Sustainability analysis completed for all files"
    log "Log file available at: $WORK_DIR/$LOG_FILE"
else
    log "No staged Python files to analyze."
fi

# Final summary
log "Hook execution completed successfully"
exit 0